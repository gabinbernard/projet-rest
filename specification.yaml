openapi: 3.0.0

info:
  title: Awesome Music API
  description: An awesome API to explore awesome tracks made by awesome artists. AWESOME!!!!!
  version: 1.2.3

servers:
  - url: localhost:3000
    description: Local development server

paths:

  "/":
    get:
      summary: Returns information about the API
      responses:
        '200':
          description: The information about the API is successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api'

  "/v1/tracks/":
    get:
      tags: [ "Tracks" ]
      summary: "Get all tracks"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
    post:
      tags: [ "Tracks" ]
      summary: "Post a track"
      requestBody:
        $ref: "#/components/requestBodies/track"
      responses:
        200:
          description: "The track has been created"
        400:
          $ref: "#/components/responses/200-SUCCESS-LIST"
  "/v1/tracks/{id}/":
    get:
      tags: [ "Tracks" ]
      summary: "Get a track"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The track has been edited"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/track"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Tracks" ]
      summary: "Edit a track"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/track"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-EDITED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    delete:
      tags: ["Tracks"]
      summary: "Delete a track"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-DELETED"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/tracks/{id}/album/":
    get:
      tags: [ "Tracks", "Albums" ]
      summary: "Get a track's ablum"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The track's album has been returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/album"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Tracks", "Albums" ]
      summary: "Set or edit a track's album"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/relation"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-RELATION"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/tracks/{id}/media-type/":
    get:
      tags: [ "Tracks", "Media Types" ]
      summary: "Get a track's media type"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The track's media type has been returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/media_type"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Tracks", "Media Types" ]
      summary: "Set or edit a track's media type"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/relation"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-RELATION"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/tracks/{id}/genre/":
    get:
      tags: [ "Tracks", "Genres" ]
      summary: "Get a track's genre"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The track's genre has been returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genre"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Tracks", "Genres" ]
      summary: "Set or edit a track's genre"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/relation"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-RELATION"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/tracks/{id}/playlists/":
    get:
      tags: [ "Tracks", "Playlists" ]
      summary: "Get a list of playlists that include this track"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The track's playlist has been returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playlist"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Tracks", "Playlists" ]
      summary: "Set or edit a track's playlist"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/relation"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-RELATION"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"

  "/v1/playlists/":
    get:
    post:
  "/v1/playlists/{id}/":
    get:
    put:
    delete:
  "/v1/playlists/{id}/tracks/":
    get:
    post:
  "/v1/playlists/{playlist_id}/tracks/{track_id}":
    delete:

  "/v1/albums/":
    get:
      tags: [ "Albums" ]
      summary: "Get all albums"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
    post:
      tags: [ "Albums" ]
      summary: "Post an album"
      requestBody:
        $ref: "#/components/requestBodies/album"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-CREATED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
  "/v1/albums/{id}":
    get:
      tags: [ "Albums" ]
      summary: "Get an album"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The album is returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/album"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Albums" ]
      summary: "Edit an album"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/album"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-EDITED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    delete:
      tags: [ "Albums" ]
      summary: "Delete an album"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-DELETED"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/albums/{id}/artist/":
    get:
      tags: [ "Albums", "Artists" ]
      summary: "Get an album's artist"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The album's artist is returned"
          content:
            applicaton/json:
              schema:
                $ref: "#/components/schemas/artist"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Albums", "Artists" ]
      summary: "Set or edit an album's artist"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/relation"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-RELATION"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/albums/{id}/tracks/":
    get:
      tags: [ "Albums", "Tracks" ]
      summary: "Get an album's tracks"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"

  "/v1/artists/":
    get:
      tags: [ "Artists" ]
      summary: "Get all artists"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
    post:
      tags: [ "Artists" ]
      summary: "Post an artist"
      requestBody:
        $ref: "#/components/requestBodies/artist"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-CREATED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
  "/v1/artists/{id}/":
    get:
      tags: [ "Artists" ]
      summary: "Get an artist"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The artist is returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/artist"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Artists" ]
      summary: "Edit an artist"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/artist"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-EDITED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    delete:
      tags: [ "Artists" ]
      summary: "Delete an artist"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-DELETED"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/artists/{id}/albums/":
    get:
      tags: [ "Artists", "Albums" ]
      summary: "Get all albums made by an artist"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"

  "/v1/media-types/":
    get:
      tags: [ "Media Types" ]
      summary: "Get all media types"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
    post:
      tags: [ "Media Types" ]
      summary: "Post a media type"
      requestBody:
        $ref: "#/components/requestBodies/media_type"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-CREATED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
  "/v1/media-types/{id}/":
    get:
      tags: [ "Media Types" ]
      summary: "Get a media type"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The media type is returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/media_type"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Media Types" ]
      summary: "Edit a media type"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/media_type"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-EDITED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    delete:
      tags: [ "Media Types" ]
      summary: "Delete a media type"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-DELETED"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/media-types/{id}/tracks/":
    get:
      tags: [ "Media Types", "Tracks" ]
      summary: "Get all tracks having a specific media type"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"


  "/v1/genres/":
    get:
      tags: [ "Genres" ]
      summary: "Get all genres"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
    post:
      tags: [ "Genres" ]
      summary: "Post a genre"
      requestBody:
        $ref: "#/components/requestBodies/genre"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-CREATED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
  "/v1/genres/{id}/":
    get:
      tags: [ "Genres" ]
      summary: "Get a genre"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "The genre is returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/genre"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    put:
      tags: [ "Genres" ]
      summary: "Edit a genre"
      parameters:
      - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/genre"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-EDITED"
        400:
          $ref: "#/components/responses/400-ERROR-WRONG-REQUEST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
    delete:
      tags: [ "Genres" ]
      summary: "Delete a genre"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-DELETED"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"
  "/v1/genres/{id}/tracks/":
    get:
      tags: [ "Genres", "Tracks" ]
      summary: "Get all tracks having a specific genre"
      parameters:
      - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/200-SUCCESS-LIST"
        404:
          $ref: "#/components/responses/404-ERROR-NOT-FOUND"

components:
  responses:
    200-SUCCESS-LIST:
      description: "The entries are returned"
      content:
        application/json:
          schema:
            type: array
            items:
              type: integer
    200-SUCCESS-CREATED:
      description: "The resource has been created"
    200-SUCCESS-RELATION:
      description: "The relation has been updated"
    200-SUCCESS-EDITED:
      description: "The resource has been edited"
    200-SUCCESS-DELETED:
      description: "The resource has been deleted"
    400-ERROR-WRONG-REQUEST:
      description: "Wrong request"
    404-ERROR-NOT-FOUND:
      description: "The resource has not been found"
  parameters:
    id:
      name: id
      in: path
      description: Resource id
      required: true
      schema:
        type: integer
        minimum: 0
  requestBodies:
    relation:
      description: A track
      required: true
      content:
        application/java:
          schema:
            type: object
            properties:
              id:
                type: string
    track:
      description: A track
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/track"
    album:
      description: An album
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/album"
    artist:
      description: An artist
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/artist"
    playlist:
      description: A playlist
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/playlist"
    playlist_track:
      description: A playlist track association
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              trackId:
                type: integer
              playlistId:
                type: integer
    media_type:
      description: A media type
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/media_type"
    genre:
      description: A genre
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/genre"
  schemas:
    api:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
        company_name:
          type: string
        company_address:
          type: string
        company_owner:
          type: string
    track:
      type: object
      properties:
        name:
          type: string
        composer:
          type: string
        milliseconds:
          type: integer
        bytes:
          type: integer
    album:
      type: object
      properties:
        name:
          type: string
    artist:
      type: object
      properties:
        name:
          type: string
    playlist:
      type: object
      properties:
        name:
          type: string
    media_type:
      type: object
      properties:
        name:
          type: string
    genre:
      type: object
      properties:
        name:
          type: string